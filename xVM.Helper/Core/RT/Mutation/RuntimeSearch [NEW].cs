using System;
using System.Reflection;
using System.Collections.Generic;

using dnlib.DotNet;
using dnlib.DotNet.Emit;

namespace xVM.Helper.Core.RT.Mutation
{
    internal class RuntimeSearch
    {
        internal VMRuntime VMRT;

        #region Searched
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public MethodDef IDAttribute_Ctor;

        public TypeDef AntiTamperEXEC;
        public MethodDef AntiTamperEXEC_Ctor;
        public MethodDef AntiTamperEXEC_Initialize;
        public FieldDef AntiTamperEXEC_AntiTamperRTIsRunning_Field;

        public TypeDef ConstantsProt;
        public MethodDef ConstantsProt_Initialize;
        public MethodDef ConstantsProt_Get;

        public TypeDef Murmur2;
        public MethodDef Murmur2_Hash;

        public TypeDef VMData;
        public MethodDef VMData_Ctor;

        public TypeDef VMEntry;
        public MethodDef VMEntry_Ctor;
        public MethodDef VMEntry_Invoke;
        public MethodDef VMEntry_ConfigureRT;

        public TypeDef VMInstance;
        public MethodDef VMInstance_Invoke;

        public TypeDef VMTrampoline;

        public TypeDef Utils;
        public MethodDef Utils_ReadCompressedULong;
        public MethodDef Utils_FromCodedToken;

        public TypeDef Interpreter;
        public MethodDef Interpreter_GetInternalVData;
        public MethodDef Interpreter_Set_VMDATA;
        public MethodDef Interpreter_Set_Constants;
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        #endregion

        public RuntimeSearch(VMRuntime runtime)
        {
            VMRT = runtime;
        }

        public RuntimeSearch Search()
        {
            try
            {
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                foreach (var iDattr in VMRT.RTModule.Find(RTMap.IDAttribute, true).FindMethods(RTMap.AnyCtor))
                {
                    IDAttribute_Ctor = iDattr;
                }

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                AntiTamperEXEC = VMRT.RTModule.Find(RTMap.AntiTamperEXEC, true);
                AntiTamperEXEC_Ctor = AntiTamperEXEC.FindMethod(RTMap.AnyCtor);
                AntiTamperEXEC_Initialize = AntiTamperEXEC.FindMethod(RTMap.AntiTamperEXEC_Initialize);
                AntiTamperEXEC_AntiTamperRTIsRunning_Field = AntiTamperEXEC.FindField(RTMap.AntiTamperEXEC_AntiTamperRTIsRunning_Field);

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                ConstantsProt = VMRT.RTModule.Find(RTMap.ConstantsProt, true);
                ConstantsProt_Initialize = ConstantsProt.FindMethod(RTMap.ConstantsProt_Initialize);
                ConstantsProt_Get = ConstantsProt.FindMethod(RTMap.ConstantsProt_Get);

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                Murmur2 = VMRT.RTModule.Find(RTMap.Murmur2, true);
                Murmur2_Hash = Murmur2.FindMethod(RTMap.Murmur2_Hash);

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                VMData = VMRT.RTModule.Find(RTMap.VMData, true);
                VMData_Ctor = VMData.FindMethod(RTMap.AnyCtor);

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                Utils = VMRT.RTModule.Find(RTMap.Utils, true);
                foreach (var utilsreadcompres in VMRT.RTModule.Find(RTMap.Utils, true).FindMethods(RTMap.Utils_ReadCompressedULong))
                {
                    Utils_ReadCompressedULong = utilsreadcompres;
                }
                foreach (var utilstoken in VMRT.RTModule.Find(RTMap.Utils, true).FindMethods(RTMap.Utils_FromCodedToken))
                {
                    Utils_FromCodedToken = utilstoken;
                }

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                VMEntry = VMRT.RTModule.Find(RTMap.VMEntry, true);
                VMEntry_Invoke = VMEntry.FindMethod(RTMap.VMEntry_Invoke);
                VMEntry_ConfigureRT = VMEntry.FindMethod(RTMap.VMEntry_ConfigureRT);
                foreach (var entry_ctor in VMRT.RTModule.Find(RTMap.VMEntry, true).FindMethods(RTMap.AnyCtor))
                {
                    VMEntry_Ctor = entry_ctor;
                }

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                VMInstance = VMRT.RTModule.Find(RTMap.VMInstance, true);
                foreach (var vmiinvoke in VMRT.RTModule.Find(RTMap.VMInstance, true).FindMethods(RTMap.VMInstance_Invoke))
                {
                    if (vmiinvoke.Parameters.Count == 6)
                    {
                        VMInstance_Invoke = vmiinvoke;
                    }
                }

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                VMTrampoline = VMRT.RTModule.Find(RTMap.VMTrampoline, true);

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                Interpreter = VMRT.RTModule.Find(RTMap.Interpreter, true);
                foreach (var internalvd_md in VMRT.RTModule.Find(RTMap.Interpreter, true).FindMethods(RTMap.Interpreter_GetInternalVData))
                {
                    Interpreter_GetInternalVData = internalvd_md;
                }
                foreach (var setvdata in VMRT.RTModule.Find(RTMap.Interpreter, true).FindMethods(RTMap.Interpreter_Set_VMDATA))
                {
                    Interpreter_Set_VMDATA = setvdata;
                }
                foreach (var setconst in VMRT.RTModule.Find(RTMap.Interpreter, true).FindMethods(RTMap.Interpreter_Set_Constants))
                {
                    Interpreter_Set_Constants = setconst;
                }

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            }
            catch (Exception except)
            {
                NativeMethods.MessageBox(except.ToString(), "ERROR! - " + except.GetType().Name, NativeMethods.MessageBoxButtons.OK, NativeMethods.MessageBoxIcon.Error);
            }
            return this;
        }
    }
}
